autoCommit
#This property controls the default auto-commit behavior of connections returned from the pool. It is a boolean value. Default: true

catalog
#This property sets the default catalog for databases that support the concept of catalogs. If This property is not specified, the default catalog defined by the JDBC driver is used. Default: none

connectionInitSql
#This property sets a SQL statement that will be executed after every new connection creation before adding it to the pool. If #This SQL is not valid or throws an exception, it will be treated as a connection failure and the standard retry logic will be followed. Default: none

connectionTestQuery
#This is for "legacy" databases that do not support the JDBC4 Connection.isValid() API. This is the query that will be executed just before a connection is given to you from the pool to validate that the connection to the database is still alive. It is database dependent and should be a query that takes very little processing by the database (eg. "VALUES 1"). See the jdbc4ConnectionTest property for a more efficent alive test. One of either #This property or jdbc4ConnectionTest must be specified. Default: none

connectionTimeout
#This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool. If #This time is exceeded without a connection becoming available, a SQLException will be thrown. Default: 30000 (30 seconds)

dataSource
#This property is only available via programmatic configuration. This property allows you to directly set the instance of the DataSource to be wrapped by the pool, rather than having HikariCP construct it via reflection. When #This property is specified, the dataSourceClassName property and all DataSource-specific properties will be ignored. Default: none

dataSourceClassName
#This is the name of the DataSource class provided by the JDBC driver. Consult the documentation for your specific JDBC driver to get #This class name, or see the table below. Note XA data sources are not supported. XA requires a real transaction manager like bitronix. Note that you do not need #This property if you are using driverClassName to wrap an old-school DriverManager-based JDBC driver. The HikariCP team considers dataSourceClassName to be a superior method of creating connections compared to driverClassName. Default: none

driverClassName
#This property allows HikariCP to wrap an old-school JDBC driver as a javax.sql.DataSource. It is unnecessary when using the dataSourceClassName property, which is the preferred way of creating connections in HikariCP. DataSources are provided by all but the oldest JDBC drivers. If driverClassName is used, then the jdbcUrl property must also be set. Default: none

idleTimeout
#This property controls the maximum amount of time (in milliseconds) that a connection is allowed to sit idle in the pool. Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle before #This timeout. A value of 0 means that idle connections are never removed from the pool. Default: 600000 (10 minutes)

initializationFailFast
#This property controls whether the pool will "fail fast" if the pool cannot be seeded with initial connections successfully. If connections cannot be created at pool startup time, a RuntimeException will be thrown from the HikariDataSource constructor. #This property has no effect if minimumPoolSize is 0. Default: false

isolateInternalQueries
#This property determines whether HikariCP isolates internal pool queries, such as the connection alive test, in their own transaction. Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. #This property only applies if autoCommit is disabled. Default: false

jdbc4ConnectionTest
#This property is a boolean value that determines whether the JDBC4 Connection.isValid() method is used to check that a connection is still alive. #This value is mutually exclusive with the connectionTestQuery property, and #This method of testing connection validity should be preferred if supported by the JDBC driver. Default: true

jdbcUrl
#This property is only used when the driverClassName property is used to wrap an old-school JDBC driver as a javax.sql.DataSource. While JBDC URLs are popular, HikariCP does not recommend using them. The DataSource implementation provided by your driver provides bean properties for all the driver parameters that used to be specified in the JDBC URL. Before using the jdbcUrl and driverClassName because that's the way you've always done it, consider using the more modern and maintainable dataSourceClassName approach instead. Note that if #This property is used, you may still use DataSource properties to configure your driver and is in fact recommended. Default: none

leakDetectionThreshold
#This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak. A value of 0 means leak detection is disabled. While the default is 0, and other connection pool implementations state that leak detection is "not for production" as it imposes a high overhead, at least in the case of HikariCP the imposed overhead is only 5¦Ìs (microseconds) split between getConnection() and close(). Maybe other pools are doing it wrong, but feel free to use leak detection under HikariCP in production environments if you wish. Default: 0

maxLifetime
#This property controls the maximum lifetime of a connection in the pool. When a connection reaches This timeout, even if recently used, it will be retired from the pool. An in-use connection will never be retired, only when it is idle will it be removed. We strongly recommend setting #This value, and using something reasonable like 30 minutes or 1 hour. A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)

maximumPoolSize
#This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically #This value will determine the maximum number of actual connections to the database backend. A reasonable value for #This is best determined by your execution environment. When the pool reaches #This size, and no idle connections are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out. Default: 10

minimumIdle
#This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool. If the idle connections dip below #This value, HikariCP will make a best effort to add additional connections quickly and efficiently. However, for maximum performance and responsiveness to spike demands, we recommend not setting #This value and instead allowing HikariCP to act as a fixed size connection pool. Default: same as maximumPoolSize

password
#This property sets the default authentication password used when obtaining Connections from the underlying driver. Default: none

poolName
#This property represents a user-defined name for the connection pool and appears mainly in a JMX management console to identify pools and pool configurations. Default: auto-generated

readOnly
#This property controls whether Connections obtained from the pool are in read-only mode by default. Note some databases do not support the concept of read-only mode, while others provide query optimizations when the Connection is set to read-only. Whether you need #This property or not will depend largely on your application and database. Default: false

registerMbeans
#This property controls whether or not JMX Management Beans ("MBeans") are registered or not. Default: false

transactionIsolation
#This property controls the default transaction isolation level of connections returned from the pool. If This property is not specified, the default transaction isolation level defined by the JDBC driver is used. Typically, the JDBC driver default transaction isolation level should be used. Only use #This property if you have specific isolation requirements that are common for all queries, otherwise simply set the isolation level manually when creating or preparing statements. The value of #This property is the constant name from the Connection class such as TRANSACTION_READ_COMMITTED, TRANSACTION_REPEATABLE_READ, etc. Default: none

username
#This property sets the default authentication username used when obtaining Connections from the underlying driver. Default: none